92328edde95f65943128cf7ee4cef72431aaccd8de8cde7eef4c1195cad68a2e

def build_prompt(question, ideal_answer, student_answer, missing_keywords):
    hint = ""
    if missing_keywords:
        hint = "It seems the student may have missed one or more important scientific ideas. Consider gently prompting them to revisit key parts of the process."

    return (
        f"You are a supportive but strict middle school science teacher.\n\n"
        f"Question: {question}\n"
        f"Ideal Answer: {ideal_answer}\n"
        f"Student Answer: {student_answer}\n\n"
        f"{hint}\n\n"
        f"Now write helpful, constructive feedback for the student:\n"
        f"- If the answer is same as or very close to the ideal answer, say it's correct.\n"
        f"- If they missed something important, just hint at it ‚Äî do not give the keyword.\n"
        f"- If there's a spelling mistake, suggest checking it without revealing it.\n"
        f"- Do NOT include internal thoughts or use <think> tags.\n"
        f"- If the answer is completely wrong and not even close, don't hesitate to say it.\n"
        f"- Be friendly and encouraging."
    )



background: linear-gradient(90deg,#e0dfd6 ,#212b09 );



let questions = [];
let currentQuestionIndex = 0;
let status = ["not-visited", "not-visited", "not-visited", "not-visited", "not-visited"];

window.onload = async () => {
    const username = localStorage.getItem("username");
    const grade = localStorage.getItem("grade");

    if (!username || !grade) {
        alert("Missing username or grade. Please login again.");
        window.location.href = "login.html";
        return;
    }

    document.getElementById("username").innerText = username;
    document.getElementById("grade").innerText = `Grade ${grade}`;

    try {
        const response = await fetch("http://127.0.0.1:5000/get-questions", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ username })
        });

        const data = await response.json();

        if (!data.questions || data.questions.length === 0) {
            document.getElementById("question-text").innerText = "‚ùå Failed to load questions.";
            return;
        }

        questions = data.questions;
        renderPalette();
        showQuestion();
    } catch (err) {
        document.getElementById("question-text").innerText = "‚ùå Error loading questions.";
        console.error(err);
    }
};

function renderPalette() {
    const palette = document.getElementById("palette");
    palette.innerHTML = "";

    for (let i = 0; i < 5; i++) {
        const btn = document.createElement("button");
        btn.innerText = i + 1;
        btn.className = status[i];
        btn.onclick = () => jumpToQuestion(i);
        palette.appendChild(btn);
    }
}

function showQuestion() {
    document.getElementById("feedback").innerText = "";
    document.getElementById("student-answer").value = "";
    document.getElementById("question-text").innerText = questions[currentQuestionIndex].Question;

    document.getElementById("submit-btn").style.display = "inline-block";
    document.getElementById("retry-btn").style.display = "none";
    document.getElementById("next-btn").style.display = "none";
}

async function submitAnswer() {
    const studentAnswer = document.getElementById("student-answer").value.trim();

    if (!studentAnswer) {
        alert("Please enter your answer before submitting.");
        return;
    }

    const { Question, Answer } = questions[currentQuestionIndex];

    const response = await fetch("http://127.0.0.1:5000/generate-feedback", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            question: Question,
            ideal_answer: Answer,
            student_answer: studentAnswer
        })
    });

    const data = await response.json();
    document.getElementById("feedback").innerText = data.feedback || "Error getting feedback.";

    status[currentQuestionIndex] = "answered";
    renderPalette();

    document.getElementById("submit-btn").style.display = "none";
    document.getElementById("retry-btn").style.display = "inline-block";

    if (currentQuestionIndex < 4) {
        document.getElementById("next-btn").style.display = "inline-block";
    } else {
        document.getElementById("next-btn").innerText = "Submit Test";
        document.getElementById("next-btn").style.display = "inline-block";
    }
}

function retryQuestion() {
    document.getElementById("feedback").innerText = "";
    document.getElementById("student-answer").value = "";

    document.getElementById("submit-btn").style.display = "inline-block";
    document.getElementById("retry-btn").style.display = "none";
    document.getElementById("next-btn").style.display = "none";
}

function nextQuestion() {
    if (currentQuestionIndex < 4) {
        currentQuestionIndex++;
        if (status[currentQuestionIndex] === "not-visited") {
            status[currentQuestionIndex] = "not-answered";
        }
        renderPalette();
        showQuestion();
    } else {
        alert("üéâ Test submitted successfully!");
        window.location.href = "login.html";  // or results.html later
    }
}

function jumpToQuestion(index) {
    currentQuestionIndex = index;
    if (status[currentQuestionIndex] === "not-visited") {
        status[currentQuestionIndex] = "not-answered";
    }
    renderPalette();
    showQuestion();
}

function logout() {
    localStorage.clear();
    window.location.href = "login.html";
}



body {
    margin: 0;
    font-family: 'Roboto', sans-serif;
    background-color: #f9f9f9;
}

.header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: linear-gradient(90deg,#e0dfd6 ,#212b09 );
    color: white;
    padding: 10px 20px;
}

.logo {
    height: 40px;
}

.grade-label {
    font-size: 20px;
    font-weight: bold;
}

.user-section {
    display: flex;
    align-items: center;
    gap: 10px;
}

.logout-btn {
    background-color: white;
    color: #333;
    font-weight: bold;
    border: none;
    border-radius: 4px;
    padding: 6px 12px;
    cursor: pointer;
}
.logout-btn:hover {
    opacity: 0.9;
}

.main {
    display: flex;
    padding: 20px;
    gap: 30px;
}

.left-panel {
    flex: 2;
}

.right-panel {
    flex: 1;
}

.question-text {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 15px;
}

textarea {
    width: 100%;
    height: 120px;
    padding: 10px;
    border: 2px solid #ccc;
    border-radius: 6px;
    font-size: 16px;
    resize: none;
}

.actions {
    margin-top: 15px;
    display: flex;
    gap: 10px;
}

button {
    background-color: #96bd3d;
    color: white;
    font-weight: bold;
    border: none;
    border-radius: 6px;
    padding: 10px 16px;
    cursor: pointer;
}
button:hover {
    background-color: #faa21b;
}
button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
}

.feedback-box {
    margin-top: 20px;
    padding: 12px;
    background-color: #f1f9ec;
    border-left: 4px solid #7aba59;
    font-style: italic;
    color: #333;
}

.palette-container {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 0 5px rgba(0,0,0,0.1);
}

.palette-grid {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: 8px;
    margin: 15px 0;
}

.palette-grid button {
    width: 30px;
    height: 30px;
    font-weight: bold;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    font-size: 14px;
}

.answered {
    background-color: #4caf50;
}

.not-answered {
    background-color: #f44336;
}
	
.not-visited {
    background-color: #aaa;
}

.dot {
    display: inline-block;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    margin-right: 6px;
}

.legend div {
    margin-top: 5px;
    font-size: 14px;
}



